// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 2022/8/11 11:05:18
// Input file <io\github\kerwinxu\Math\LibMath\LibMath.Language.grammar.y - 2022/8/11 11:05:16>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace io.github.kerwinxu.Math.LibMath
{
internal enum Token {error=2,EOF=3,COMPLEX=4,OP_ADD=5,OP_SUB=6,
    OP_MUL=7,OP_DIV=8,OP_REM=9,OP_FACT=10,END=11,NEG=12,
    OP_POW=13,OP_FUN=14,LEFT_BRACKET=15,RIGHT_BRACKET=16,REG=17,COMMA=18,
    ANS=19};

internal partial struct ValueType
{ 
			public System.Numerics.Complex n; 
			public string s; 
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class LibMathParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[19];
  private static State[] states = new State[34];
  private static string[] nonTerms = new string[] {
      "line", "$accept", "expr", "term", "factor", };

  static LibMathParser() {
    states[0] = new State(-3,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-3,3,-4,28,-5,33});
    states[2] = new State(-1);
    states[3] = new State(new int[]{11,4,5,5,6,15});
    states[4] = new State(-2);
    states[5] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-4,6,-5,33});
    states[6] = new State(new int[]{7,7,8,17,13,29,9,31,11,-4,5,-4,6,-4,16,-4,18,-4});
    states[7] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-5,8});
    states[8] = new State(-7);
    states[9] = new State(-12);
    states[10] = new State(-13);
    states[11] = new State(-14);
    states[12] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-3,13,-4,28,-5,33});
    states[13] = new State(new int[]{16,14,5,5,6,15});
    states[14] = new State(-15);
    states[15] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-4,16,-5,33});
    states[16] = new State(new int[]{7,7,8,17,13,29,9,31,11,-5,5,-5,6,-5,16,-5,18,-5});
    states[17] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-5,18});
    states[18] = new State(-8);
    states[19] = new State(new int[]{4,20});
    states[20] = new State(-16);
    states[21] = new State(new int[]{15,22});
    states[22] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-3,23,-4,28,-5,33});
    states[23] = new State(new int[]{16,24,18,25,5,5,6,15});
    states[24] = new State(-17);
    states[25] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-3,26,-4,28,-5,33});
    states[26] = new State(new int[]{16,27,5,5,6,15});
    states[27] = new State(-18);
    states[28] = new State(new int[]{7,7,8,17,13,29,9,31,11,-6,5,-6,6,-6,16,-6,18,-6});
    states[29] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-5,30});
    states[30] = new State(-9);
    states[31] = new State(new int[]{4,9,17,10,19,11,15,12,6,19,14,21},new int[]{-5,32});
    states[32] = new State(-10);
    states[33] = new State(-11);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-1,-3,11});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-3,5,-4});
    rules[5] = new Rule(-3, new int[]{-3,6,-4});
    rules[6] = new Rule(-3, new int[]{-4});
    rules[7] = new Rule(-4, new int[]{-4,7,-5});
    rules[8] = new Rule(-4, new int[]{-4,8,-5});
    rules[9] = new Rule(-4, new int[]{-4,13,-5});
    rules[10] = new Rule(-4, new int[]{-4,9,-5});
    rules[11] = new Rule(-4, new int[]{-5});
    rules[12] = new Rule(-5, new int[]{4});
    rules[13] = new Rule(-5, new int[]{17});
    rules[14] = new Rule(-5, new int[]{19});
    rules[15] = new Rule(-5, new int[]{15,-3,16});
    rules[16] = new Rule(-5, new int[]{6,4});
    rules[17] = new Rule(-5, new int[]{14,15,-3,16});
    rules[18] = new Rule(-5, new int[]{14,15,-3,18,-3,16});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // line -> line, expr, END
{
        //printf("%2f\n", $2);
        _result = ValueStack[ValueStack.Depth-2].n;
        }
        break;
      case 4: // expr -> expr, OP_ADD, term
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n + ValueStack[ValueStack.Depth-1].n;}
        break;
      case 5: // expr -> expr, OP_SUB, term
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n - ValueStack[ValueStack.Depth-1].n;}
        break;
      case 6: // expr -> term
{CurrentSemanticValue.n=ValueStack[ValueStack.Depth-1].n;}
        break;
      case 7: // term -> term, OP_MUL, factor
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n * ValueStack[ValueStack.Depth-1].n;}
        break;
      case 8: // term -> term, OP_DIV, factor
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n / ValueStack[ValueStack.Depth-1].n;}
        break;
      case 9: // term -> term, OP_POW, factor
{CurrentSemanticValue.n = System.Numerics.Complex.Pow(ValueStack[ValueStack.Depth-3].n,ValueStack[ValueStack.Depth-1].n);}
        break;
      case 10: // term -> term, OP_REM, factor
{CurrentSemanticValue.n = new System.Numerics.Complex((int)ValueStack[ValueStack.Depth-3].n.Real % (int)ValueStack[ValueStack.Depth-1].n.Real,0 );}
        break;
      case 11: // term -> factor
{CurrentSemanticValue.n=ValueStack[ValueStack.Depth-1].n;}
        break;
      case 12: // factor -> COMPLEX
{CurrentSemanticValue.n=ValueStack[ValueStack.Depth-1].n;}
        break;
      case 13: // factor -> REG
{CurrentSemanticValue.n = getReg(ValueStack[ValueStack.Depth-1].s);}
        break;
      case 14: // factor -> ANS
{CurrentSemanticValue.n = ANS;}
        break;
      case 15: // factor -> LEFT_BRACKET, expr, RIGHT_BRACKET
{CurrentSemanticValue.n=ValueStack[ValueStack.Depth-2].n;}
        break;
      case 16: // factor -> OP_SUB, COMPLEX
{CurrentSemanticValue.n=0-ValueStack[ValueStack.Depth-1].n;}
        break;
      case 17: // factor -> OP_FUN, LEFT_BRACKET, expr, RIGHT_BRACKET
{CurrentSemanticValue.n = fun(ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-2].n);}
        break;
      case 18: // factor -> OP_FUN, LEFT_BRACKET, expr, COMMA, expr, RIGHT_BRACKET
{CurrentSemanticValue.n = fun2(ValueStack[ValueStack.Depth-6].s, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n);}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
